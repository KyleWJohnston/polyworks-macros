version "5.0"
#========================================================
# ---- InnovMetric Software Inc.
# ---- Module  :    PolyWorks|Inspector
# ---- Version :    2018 IR3.1 (build 4226)
# ---- Date    :    Wednesday, August 15, 2018 - 10:53:05
#--------------------------------------------------------

# Created by Kyle Johnston on 2018-08-15
# Last update: 2019-02-04

# Run macro from a finished piece with a completed report
# Each scan selected to import will be used to create a new piece and export a unique report based off of the scan name
# Works best when in ADS_DRIVE folder format
# Adds/updates piece property "Cavity/Fixture" if cav1, cav 1, cav_1, or cav-1 are in the STL filename where "1" is any integer between 0 through 9 (ignores case, uses first occurance)

# LIMITATIONS
# STL files need to all use the same unit and that unit has already been selected on a prior import
# Alignment fails if alignment requires user input such as manually selecting point pairs


DECLARE workspace_path
MACRO SHARED_VARIABLE GET_VALUE ( "workspace_path", workspace_path )

# Select files to import
DECLARE files
MACRO INPUT FILE_PATH ( files, "Select files to import" , "$workspace_path:h\STL Data and Setup Pictures", "On" )
IF $files == "0"
    MACRO ECHO ( "EXIT: No files provided by user." )
    MACRO END ( )
ENDIF

# Select location to save reports
DECLARE save_dir
MACRO INPUT FOLDER_PATH ( save_dir, "Select location to save reports" , "$workspace_path:h\PDF Reports" )
IF $save_dir == "0"
    MACRO ECHO ( "EXIT: No save path provided by user." )
    MACRO END ( )
ENDIF

# Ask user if okay to continue
DECLARE continue_macro
MACRO INPUT QUESTION ( continue_macro, "Okay to begin importing the selected STL files as new pieces based on the current piece and export reports into the location specified?" )
IF $continue_macro == 0
    MACRO ECHO ( "EXIT: Macro cancelled by user" )
    MACRO END ( "No Error" )
ENDIF


# Import each file and then export the report

DECLARE i 1
DECLARE existing_model
DECLARE report_name
WHILE $i <= SIZE ( files )

    # Use filepath without parent folders and extension as piece name
    PIECE NEW ( "$files[${i}]:t:r" )

    # Replace existing polygonal model
    TREEVIEW DATA NAME GET ( 1, existing_model )
    FILE IMPORT_DATA POLYGONAL_MODEL ( $files[${i}], "stl", $existing_model )


    # If cavity/fixture in STL filename, add/change "Cavity/Fixture" number in piece properties

    DECLARE location_cav_name
    DECLARE location_cav_num
    DECLARE cav_num
	DECLARE current_cav_num

    MACRO STRING FIND_FIRST ( $files[${i}]:t:r:l, "cav", 1, location_cav_name)
    IF $location_cav_name !eq 0
        SET location_cav_num EXPR ( $location_cav_name + 3 )
        MACRO STRING SUBSTRING ( $files[${i}]:t:r:l, $location_cav_num, 2, cav_num )

        macro STRING REPLACE ( $cav_num, " ", "", 1, 1, cav_num )
        macro STRING REPLACE ( $cav_num, "_", "", 1, 1, cav_num )
        macro STRING REPLACE ( $cav_num, "-", "", 1, 1, cav_num )

        MACRO ECHO ( "Detected cavity number: $cav_num" )

		PIECE PROPERTIES CUSTOM GET ( , "Cavity/Fixture", current_cav_num )
		IF $current_cav_num == 0
            PIECE PROPERTIES CUSTOM ADD ( , "Cavity/Fixture", $cav_num )
        ELSE
            PIECE PROPERTIES CUSTOM ( , "Cavity/Fixture", $cav_num )
        ENDIF
    ELSE
        MACRO ECHO ( "No cavity number found in filename." )
    ENDIF


    # Extract all features
    FEATURE EXTRACT MEASURED ALL
    MEASURE COMPARISON_POINT EXTRACT MEASURED ALL
    MEASURE GAUGE EXTRACT MEASURED ALL

    # Export report
    TREEVIEW FORMATTED_REPORT NAME GET ( 1, report_name )
    FILE EXPORT_FORMATTED_REPORT PDF ( "${save_dir}\${files[${i}]:t:r}.pdf", "Off", $report_name )

    # Increase i before looking to do next file
    ++i

ENDWHILE